- 실패하는 테스트가 주어진 상태에서, 최대한 빨리 초록 막대 보고자 하기

일반적인 TDD 주기로는
1. 테스트 작성
2. 실행 가능하게 만들기
3. 올바르게 만들기
의 단계를 따른다.

목적은 [작동하는 깔끔한 코드]를 얻는 것으로, [작동하는 깔끔한 코드]를 얻기 위해서 먼저 '작동하는'부분에 집중하자.
'작동하는'에 해당하는 부분을 먼저 해결한 후 '깔끔한 코드'부분을 해결하는 것이다.

🙌 최대한 빨리 초록 막대를 보기 위해서 취할 수 있는 전략
1. 가짜로 구현하기
  상수를 반환하게 만들고 진짜 코드를 얻을 때까지 단계적으로 상수를 변수로 바꾸어 나간다.
  내가 원하는 값으로 테스트를 통과하기 위해서 어떤 코드를 작성해야 하는지 명확히 판단이 서지 않을 때 사용할 수 있는 방법인 듯 하다.
  이런 방식으로 초록 막대를 보는 것이 무턱대고 테스트를 성공시키고자 하는 의도보다는
  상수를 사용해서 반환함으로써 그 자체로 원하는 값을 반환받기 위한 코드를 구현하고 있는 것이고
  그 순서를 유지하면서 수정하며 빠르게 틀을 잡을 수 있을 것이라고 생각했다.
  
2. 명백한 구현 사용하기
  실제 구현을 입력하는 것으로, 보통 실무에서 내가 어떤 코드를 입력해야 할 지 알 때는 명백한 구현을 계속 더해 나가다가
  예상치 못한 빨간 막대를 만나게 되면 잠시 멈춰 가짜로 구현하기 방법을 사용하면서 올바른 코드로 리팩토링 한다고 한다.
  그러다 다시 자신감을 되찾으면 명백한 구현하기 모드로 돌아온다.
  해당 방식은 가짜로 구현하기 방식과 달리 내가 어떤 코드를 입력하고자 하는지 확실할 때 더욱 빠르게 작성할 수 있는 방법이라고 생각했다.
  말 그대로 '최대한 빨리 초록 막대를 보기 위한 전략' 중 하나이니, 상황에 따라 맞는 방식을 선택해 활용하면 좋을 듯 하다.

느낌(부작용에 대한 혐오감)을 테스트로 변환하는 것은 TDD의 일반적 주제다.
이런 작업을 오래 할수록 미적 판단을 테스트로 담아내는 것에 점점 익숙해지게 된다. (이 문장에서 나오는 미적 판단이 '초록 막대'를 보는 것인가?)
이걸 할 수 있을 때, 설계 논의는 훨씬 흥미로워지며 우선 시스템이 어떻게 동작해야 하는지 논의할 수 있다.
일단 올바른 행위에 대해 결정을 내린 후에, 그 행위를 얻어낼 수 있는 최상의 방법에 대해 이야기할 수 있다.

여기서 말하는 '올바른 행위에 대한 결정을 내린 후, 그 행위를 얻어낼 수 있는 최상의 방법에 대해 이야기한다.'라는 문장에서 
'올바른 행위에 대한 결정'는 초록 막대를 이야기하고, '행위를 얻어낼 수 있는 최상의 방법'라는 부분은 리팩토링을 진행하는 것이라고 한다면
읽은 내용이 조금씩 이해가는 것 같다. 원하는 아키텍처를 완성하기 위해 먼저 테스트 코드를 작성하는 것이 TDD라고 생각하는데,
어떻게 작성되어야 하는 지 몰라 테스트 코드에서부터 막혀버린다면 이후 코드 작성은 꽤나 부담스럽고 복잡하게 느껴질 수 있겠다.
1. 원하는 대로 짠다. -> 2. 그 내용이 성공한다면, 더 예쁘게 바꿔보자. TDD를 진행할 때 가져야 할 제일 중요한 마인드를 알려주고 있다고 생각한다.
