(66p.) 기존 testMultiplication()에서 Dollar의 값에 인자로 들어온 수를 곱하고, 그 결과를 비교하는 방식으로 직접 객체를 생성해 비교했다.
이 때 assertEquals(10, product.amount); 로 기댓값과 실제값을 비교하는데,
해당 단언을 Dollar와 Dollar를 비교하는 것으로 재작성했다.

Dollar product = five.times(2);
assertEquals(new Dollar(10), product);

책에서는 재작성한 것이 더 좋아보인다며 다음 단언도 재작성했다.

assertEquals(new Dollar(15), product);

값을 비교할 때, 예상값을 실제 숫자로 표현하는 것이 더 명확해보이지 않을까 싶어 왜 굳이 객체로 바꾸는 지 의아했는데,
다음 코드에서 놀라움을 느꼈다. product 변수가 쓸모 없어진 것이다.

assertEquals(new Dollar(10), five.times(2));
assertEquals(new Dollar(15), five.times(2));

위와 같이 인라인시킴으로써 의도를 더욱 명확하게 보여주고자 했다.
또한, Dollar의 amount 인스턴스 변수를 사용하는 코드가 Dollar 자신밖에 없어, private으로 변경할 수 있게 되었다.

(76p.) 첫번째 테스트로 목록화 한 $5 + 10CHF = $10을 다시 테스트코드로 작성해보자.
Dollar와 같은 구조의 Franc 객체를 만들고 컴파일 되도록 Dollar의 코드를 복사해 실행함으로써 정상적으로 초록 막대를 볼 수 있다.
컴파일은 성공했지만, 중복 코드가 많이 생겨나 리팩토링이 필요하다.
Dollar와 Franc에서 사용되는 amount와 동치성을 확인하는 equals를 상위 클래스 Money로 옮김으로써, 중복을 제거하고 더욱 가시성을 높일 수 있었다.

단순히 테스트 코드를 작성하면서 예상값과 실제값을 비교하는 것이 아니라
객체화 시키면서 불필요한 중복 코드를 없애고 의미적인 부분을 쉽게 눈에 들어올 수 있게 변경한 것이 새롭게 느껴지고 흥미로웠다.
